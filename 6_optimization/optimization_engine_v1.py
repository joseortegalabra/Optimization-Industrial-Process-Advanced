############################## OPTIMIZATION ENGINE GENERATED BY THE NOTEBOOK VERSION 1: 1_optimization_advanced ##############################
import pickle
import pandas as pd
import numpy as np
import json

#gurobi
import gurobipy_pandas as gppd
from gurobi_ml import add_predictor_constr
import gurobipy as gp




def load_model_to_gurobi(name_id_model, info_model_load, df_input_values):
    """
    Given info model of the model and input data, define if the model is a piecewise model and load the model according the info model json (metadata)

    Args
        name_id_model (string): string that represent the name/id of the model
        info_model_load (dict) dictionary python with the info model to load
        df_input_values (dataframe): dataframe with the input values to clasify which model load (if it is a piecewise model)

    Return
        model_loaded (sklearn model)
    """

    ########## GET NAME OF THE MODEL ACCORDING THE MODEL IS A PIECEWISE MODEL OR NOT ##########
    first_key = next(iter(info_model_load))
    if info_model_load[first_key]['tag'] != 'no_apply':
        print('there piecewise model')
    
        # ---- evaluate threshold ----
        actual_value_to_compare_threshold = df_input_values[info_model_load[first_key]['tag']].values[0]
        # value <= threshold
        if actual_value_to_compare_threshold <= info_model_load[first_key]['threshold'][0]:
            name_model_loaded = info_model_load[first_key]['names_pkl_models'][0]
    
        # else value >= theshold
        else:
            name_model_loaded = info_model_load[first_key]['names_pkl_models'][1]
    
    else:
        print('There are not piecewise model')
        name_model_loaded = info_model_load[first_key]['names_pkl_models'][0]
    
    print('model_name_pkl: ', name_model_loaded)
    
    
    ########## LOAD MODEL ##########
    path_model_loaded = f'artifacts/models/{name_id_model}/{name_model_loaded}.pkl'
    model_loaded = pd.read_pickle(path_model_loaded)
    
    return model_loaded



def optimization_engine(df_input_values,
                        bounds_decision_var_features,
                        bounds_decison_var_target,
                        deltas_decision_var_features,
                        prices,
                        env
                        ):
    """
    Given a certain parameters, ml models, etc. Give a optimal solution using gurobi
    
    Args:
        df_input_values

        bounds_decision_var_features
        bounds_decison_var_target
        deltas_decision_var_features
        prices

        env (dictionary): with keys of licence of gurobi
    """

    ####################################################################################################################################################
    ############################################################ LOAD CONFIG FILE Optimizer's own ############################################################

    # 1. Load json info/metadata models
    ######## MODEL: 'd0eop_microkappa' ########
    name_model = 'd0eop_microkappa'
    path_info_model_d0eop_microkappa = f'config/optimization_engine/ml_models/InfoModel-{name_model}.json'
    with open(path_info_model_d0eop_microkappa, 'r') as file:
        info_model_d0eop_microkappa = json.load(file)


    ######## MODEL: 'd0eop_blancura' ########
    name_model = 'd0eop_blancura'
    path_info_model_d0eop_blancura = f'config/optimization_engine/ml_models/InfoModel-{name_model}.json'
    with open(path_info_model_d0eop_blancura, 'r') as file:
        info_model_d0eop_blancura = json.load(file)


    ######## MODEL: 'd1_brillo' ########
    name_model = 'd1_brillo'
    path_info_model_d1_brillo = f'config/optimization_engine/ml_models/InfoModel-{name_model}.json'
    with open(path_info_model_d1_brillo, 'r') as file:
        info_model_d1_brillo = json.load(file)
        


    ######## MODEL: 'p_blancura' ########
    name_model = 'p_blancura'
    path_info_model_p_blancura = f'config/optimization_engine/ml_models/InfoModel-{name_model}.json'
    with open(path_info_model_p_blancura, 'r') as file:
        info_model_p_blancura = json.load(file)


    # 7. Load model machine learning - MANUALLY

    ######################## d0eop_microkappa ########################
    model_d0eop_microkappa = load_model_to_gurobi(name_id_model = 'd0eop_microkappa', 
                                                info_model_load = info_model_d0eop_microkappa, 
                                                df_input_values = df_input_values
                                                )

    ######################## d0eop_blancura ########################
    model_d0eop_blancura = load_model_to_gurobi(name_id_model = 'd0eop_blancura', 
                                                info_model_load = info_model_d0eop_blancura, 
                                                df_input_values = df_input_values
                                                )

    ######################## d1_brillo ########################
    model_d1_brillo = load_model_to_gurobi(name_id_model = 'd1_brillo', 
                                                info_model_load = info_model_d1_brillo, 
                                                df_input_values = df_input_values
                                                )

    ######################## p_blancura ########################
    model_p_blancura = load_model_to_gurobi(name_id_model = 'p_blancura', 
                                                info_model_load = info_model_p_blancura, 
                                                df_input_values = df_input_values
                                                )


    # 2. Define list of features and target for each model
    ######## MODEL: 'd0eop_microkappa' ########

    # read table master tag
    name_model = 'd0eop_microkappa'
    path_list_features_target_to_optimization = f'config/optimization_engine/ml_models/MaestroTags-{name_model}-general.xlsx'
    master_tags_d0eop_microkappa = pd.read_excel(path_list_features_target_to_optimization)

    # define lists: "list_features", "list_features_controlables", "list_target"
    list_features_d0eop_microkappa = master_tags_d0eop_microkappa[master_tags_d0eop_microkappa['CLASIFICACION']!= 'R']['TAG'].tolist()
    list_features_controlables_d0eop_microkappa = master_tags_d0eop_microkappa[master_tags_d0eop_microkappa['CLASIFICACION'] == 'C']['TAG'].tolist()
    list_target_d0eop_microkappa = master_tags_d0eop_microkappa[master_tags_d0eop_microkappa['CLASIFICACION'] == 'R']['TAG'].tolist()


    ######## MODEL: 'd0eop_blancura' ########

    # read table master tag
    name_model = 'd0eop_blancura'
    path_list_features_target_to_optimization = f'config/optimization_engine/ml_models/MaestroTags-{name_model}-general.xlsx'
    master_tags_d0eop_blancura = pd.read_excel(path_list_features_target_to_optimization)

    # define lists: "list_features", "list_features_controlables", "list_target"
    list_features_d0eop_blancura = master_tags_d0eop_blancura[master_tags_d0eop_blancura['CLASIFICACION']!= 'R']['TAG'].tolist()
    list_features_controlables_d0eop_blancura = master_tags_d0eop_blancura[master_tags_d0eop_blancura['CLASIFICACION'] == 'C']['TAG'].tolist()
    list_target_d0eop_blancura = master_tags_d0eop_blancura[master_tags_d0eop_blancura['CLASIFICACION'] == 'R']['TAG'].tolist()


    ######## MODEL: 'd1_brillo' ########

    # read table master tag
    name_model = 'd1_brillo'
    path_list_features_target_to_optimization = f'config/optimization_engine/ml_models/MaestroTags-{name_model}-general.xlsx'
    master_tags_d1_brillo = pd.read_excel(path_list_features_target_to_optimization)

    # define lists: "list_features", "list_features_controlables", "list_target"
    list_features_d1_brillo = master_tags_d1_brillo[master_tags_d1_brillo['CLASIFICACION']!= 'R']['TAG'].tolist()
    list_features_controlables_d1_brillo = master_tags_d1_brillo[master_tags_d1_brillo['CLASIFICACION'] == 'C']['TAG'].tolist()
    list_target_d1_brillo = master_tags_d1_brillo[master_tags_d1_brillo['CLASIFICACION'] == 'R']['TAG'].tolist()


    ######## MODEL: 'p_blancura' ########

    # read table master tag
    name_model = 'p_blancura'
    path_list_features_target_to_optimization = f'config/optimization_engine/ml_models/MaestroTags-{name_model}-general.xlsx'
    master_tags_p_blancura = pd.read_excel(path_list_features_target_to_optimization)

    # define lists: "list_features", "list_features_controlables", "list_target"
    list_features_p_blancura = master_tags_p_blancura[master_tags_p_blancura['CLASIFICACION']!= 'R']['TAG'].tolist()
    list_features_controlables_p_blancura = master_tags_p_blancura[master_tags_p_blancura['CLASIFICACION'] == 'C']['TAG'].tolist()
    list_target_p_blancura = master_tags_p_blancura[master_tags_p_blancura['CLASIFICACION'] == 'R']['TAG'].tolist()




    ####################################################################################################################################################
    ############################################################ RUN OPTIMIZER ############################################################

    # 0. Load transversal params - sets of optimization model
    list_bleaching = ['bleaching']
    index_bleaching = pd.Index(list_bleaching)

    # 1. Create guroby optimization model
    m = gp.Model(name = "Bleaching Optimization Advanced", env = env)

    # 3. Input parameters of optimization model
    # 3.1 Actual values of decision variables

    ######################## actual values for model d0eop_microkappa ########################
    # obs:see that actual value in the data is search accoring the column "tag_description" in master file to get the name of the feature/tag in filter data


    #especifico_dioxido_d0
    tag_especifico_dioxido_d0 = master_tags_d0eop_microkappa[master_tags_d0eop_microkappa['TAG_DESCRIPTION'] == 'especifico_dioxido_d0']['TAG'].values[0]
    actual_value_especifico_dioxido_d0 = df_input_values[tag_especifico_dioxido_d0].values[0]

    #especifico_oxigeno_eop
    tag_especifico_oxigeno_eop = master_tags_d0eop_microkappa[master_tags_d0eop_microkappa['TAG_DESCRIPTION'] == 'especifico_oxigeno_eop']['TAG'].values[0]
    actual_value_especifico_oxigeno_eop = df_input_values[tag_especifico_oxigeno_eop].values[0]

    #especifico_peroxido_eop
    tag_especifico_peroxido_eop = master_tags_d0eop_microkappa[master_tags_d0eop_microkappa['TAG_DESCRIPTION'] == 'especifico_peroxido_eop']['TAG'].values[0]
    actual_value_especifico_peroxido_eop = df_input_values[tag_especifico_peroxido_eop].values[0]

    #especifico_soda_eop
    tag_especifico_soda_eop = master_tags_d0eop_microkappa[master_tags_d0eop_microkappa['TAG_DESCRIPTION'] == 'especifico_soda_eop']['TAG'].values[0]
    actual_value_especifico_soda_eop = df_input_values[tag_especifico_soda_eop].values[0]


    ######################## actual values for model d0eop_blancura ########################
    #### OBS: THE DECISION VARIABLES OF "d0eop_blacura" are the same of "d0eop_microkappa". The only difference is the target
    #### incluse the rest of features (that are not decision variables) are the same.


    ######################## actual values for model d1_brillo ########################
    # obs:see that actual value in the data is search accoring the column "tag_description" in master file to get the name of the feature/tag in filter data


    #especifico_dioxido_d1
    tag_especifico_dioxido_d1 = master_tags_d1_brillo[master_tags_d1_brillo['TAG_DESCRIPTION'] == 'especifico_dioxido_d1']['TAG'].values[0]
    actual_value_especifico_dioxido_d1 = df_input_values[tag_especifico_dioxido_d1].values[0]

    #especifico_acido_d1
    tag_especifico_acido_d1 = master_tags_d1_brillo[master_tags_d1_brillo['TAG_DESCRIPTION'] == 'especifico_acido_d1']['TAG'].values[0]
    actual_value_especifico_acido_d1 = df_input_values[tag_especifico_acido_d1].values[0]

    ######################## actual values for model p_blancura ########################
    # obs:see that actual value in the data is search accoring the column "tag_description" in master file to get the name of the feature/tag in filter data


    #especifico_soda_p
    tag_especifico_soda_p = master_tags_p_blancura[master_tags_p_blancura['TAG_DESCRIPTION'] == 'especifico_soda_p']['TAG'].values[0]
    actual_value_especifico_soda_p = df_input_values[tag_especifico_soda_p].values[0]


    #especifico_peroxido_p
    tag_especifico_peroxido_p = master_tags_p_blancura[master_tags_p_blancura['TAG_DESCRIPTION'] == 'especifico_peroxido_p']['TAG'].values[0]
    actual_value_especifico_peroxido_p = df_input_values[tag_especifico_peroxido_p].values[0]


    #especifico_acido_p
    tag_especifico_acido_p = master_tags_p_blancura[master_tags_p_blancura['TAG_DESCRIPTION'] == 'especifico_acido_p']['TAG'].values[0]
    actual_value_especifico_acido_p = df_input_values[tag_especifico_acido_p].values[0]

    # 3.2 Parameters Rate of Change decision variables
    ######################## actual values for model d0eop_microkappa ########################

    #especifico_dioxido_d0
    delta_especifico_dioxido_d0 = deltas_decision_var_features[deltas_decision_var_features['TAG_DESCRIPTION'] == 'especifico_dioxido_d0']['DELTA'].values[0]
    delta_especifico_dioxido_d0 = float(delta_especifico_dioxido_d0)

    #especifico_oxigeno_eop
    delta_especifico_oxigeno_eop = deltas_decision_var_features[deltas_decision_var_features['TAG_DESCRIPTION'] == 'especifico_oxigeno_eop']['DELTA'].values[0]
    delta_especifico_oxigeno_eop = float(delta_especifico_oxigeno_eop)

    #especifico_peroxido_eop
    delta_especifico_peroxido_eop = deltas_decision_var_features[deltas_decision_var_features['TAG_DESCRIPTION'] == 'especifico_peroxido_eop']['DELTA'].values[0]
    delta_especifico_peroxido_eop = float(delta_especifico_peroxido_eop)

    #especifico_soda_eop
    delta_especifico_soda_eop = deltas_decision_var_features[deltas_decision_var_features['TAG_DESCRIPTION'] == 'especifico_soda_eop']['DELTA'].values[0]
    delta_especifico_soda_eop = float(delta_especifico_soda_eop)

    ######################## actual values for model d1_brillo ########################

    #especifico_dioxido_d1
    delta_especifico_dioxido_d1 = deltas_decision_var_features[deltas_decision_var_features['TAG_DESCRIPTION'] == 'especifico_dioxido_d1']['DELTA'].values[0]
    delta_especifico_dioxido_d1 = float(delta_especifico_dioxido_d1)

    #especifico_acido_d1
    delta_especifico_acido_d1 = deltas_decision_var_features[deltas_decision_var_features['TAG_DESCRIPTION'] == 'especifico_acido_d1']['DELTA'].values[0]
    delta_especifico_acido_d1 = float(delta_especifico_acido_d1)

    ######################## actual values for model p_blancura ########################

    #especifico_soda_p
    delta_especifico_soda_p = deltas_decision_var_features[deltas_decision_var_features['TAG_DESCRIPTION'] == 'especifico_soda_p']['DELTA'].values[0]
    delta_especifico_soda_p = float(delta_especifico_soda_p)

    #especifico_peroxido_p
    delta_especifico_peroxido_p = deltas_decision_var_features[deltas_decision_var_features['TAG_DESCRIPTION'] == 'especifico_peroxido_p']['DELTA'].values[0]
    delta_especifico_peroxido_p = float(delta_especifico_peroxido_p)

    #especifico_acido_p
    delta_especifico_acido_p = deltas_decision_var_features[deltas_decision_var_features['TAG_DESCRIPTION'] == 'especifico_acido_p']['DELTA'].values[0]
    delta_especifico_acido_p = float(delta_especifico_acido_p)




    # 4. Features input machine learning model fixed (that are not decision variables or parameters in optimization model)
    ######################## generate instance for model d0eop_microkappa ########################

    # list feature NC
    list_features_d0eop_microkappa_no_vc = list(set(list_features_d0eop_microkappa) - set(list_features_controlables_d0eop_microkappa))

    # generate dataframe with the mean
    instance_no_controlables_d0eop_microkappa = df_input_values[list_features_d0eop_microkappa_no_vc]


    ######################## generate instance for model d0eop_blancura ########################

    # list feature NC
    list_features_d0eop_blancura_no_vc = list(set(list_features_d0eop_blancura) - set(list_features_controlables_d0eop_blancura))

    # generate dataframe with the mean
    instance_no_controlables_d0eop_blancura = df_input_values[list_features_d0eop_blancura_no_vc]


    ######################## generate instance for model d1_brillo ########################
    ### subtract the feature controlable of this model and the targets of models the previous models (d0eop_microkappa & d0eop_blancura)

    # list features NC
    list_features_d1_brillo_no_vc = list(set(list_features_d1_brillo) - set(list_features_controlables_d1_brillo)) # substract vc d1_brillo
    list_features_d1_brillo_no_vc = list(set(list_features_d1_brillo_no_vc) - set(list_target_d0eop_microkappa))# substract target d0eop_microkappa
    list_features_d1_brillo_no_vc = list(set(list_features_d1_brillo_no_vc) - set(list_target_d0eop_blancura))# substract target d0eop_blancura

    # generate dataframe with the mean
    instance_no_controlables_d1_brillo = df_input_values[list_features_d1_brillo_no_vc]


    ######################## generate instance for model p_blancura ########################

    # list features NC
    list_features_p_blancura_no_vc = list(set(list_features_p_blancura) - set(list_features_controlables_p_blancura)) # substract vc p_blancura
    list_features_p_blancura_no_vc = list(set(list_features_p_blancura_no_vc) - set(list_target_d1_brillo))# substract target d1_brillo

    # generate dataframe with the mean
    instance_no_controlables_p_blancura = df_input_values[list_features_p_blancura_no_vc]
                                                        



    # 5. Decision variables of optimization model
    ######################## decision variables that are FEATURES in Machiine Learning Models ########################

    ############### model d0eop_microkappa ###############
    especifico_dioxido_d0 = gppd.add_vars(m, index_bleaching, name = "especifico_dioxido_d0", 
                                        lb = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_dioxido_d0']['MIN_VALUE'].values[0], 
                                        ub = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_dioxido_d0']['MAX_VALUE'].values[0]
                                        )

    especifico_oxigeno_eop = gppd.add_vars(m, index_bleaching, name = "especifico_oxigeno_eop", 
                                        lb = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_oxigeno_eop']['MIN_VALUE'].values[0], 
                                        ub = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_oxigeno_eop']['MAX_VALUE'].values[0]
                                        )

    especifico_peroxido_eop = gppd.add_vars(m, index_bleaching, name = "especifico_peroxido_eop", 
                                        lb = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_peroxido_eop']['MIN_VALUE'].values[0], 
                                        ub = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_peroxido_eop']['MAX_VALUE'].values[0]
                                        )

    especifico_soda_eop = gppd.add_vars(m, index_bleaching, name = "especifico_soda_eop", 
                                        lb = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_soda_eop']['MIN_VALUE'].values[0], 
                                        ub = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_soda_eop']['MAX_VALUE'].values[0]
                                        )



    ############### model d0eop_blancura ###############
    # OBS: all the decision variables in the model "d0eop_blancura" are the same decision variables defined in the model "d0eop_microkappa"
    # so, it is not necesary define again



    ############### model d1_brillo ###############
    especifico_dioxido_d1 = gppd.add_vars(m, index_bleaching, name = "especifico_dioxido_d1", 
                                        lb = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_dioxido_d1']['MIN_VALUE'].values[0], 
                                        ub = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_dioxido_d1']['MAX_VALUE'].values[0]
                                        )

    especifico_acido_d1 = gppd.add_vars(m, index_bleaching, name = "especifico_acido_d1", 
                                        lb = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_acido_d1']['MIN_VALUE'].values[0], 
                                        ub = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_acido_d1']['MAX_VALUE'].values[0]
                                        )



    ############### model p_blancura ###############
    especifico_soda_p = gppd.add_vars(m, index_bleaching, name = "especifico_soda_p", 
                                        lb = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_soda_p']['MIN_VALUE'].values[0], 
                                        ub = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_soda_p']['MAX_VALUE'].values[0]
                                        )

    especifico_peroxido_p = gppd.add_vars(m, index_bleaching, name = "especifico_peroxido_p", 
                                        lb = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_peroxido_p']['MIN_VALUE'].values[0], 
                                        ub = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_peroxido_p']['MAX_VALUE'].values[0]
                                        )

    especifico_acido_p = gppd.add_vars(m, index_bleaching, name = "especifico_acido_p", 
                                        lb = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_acido_p']['MIN_VALUE'].values[0], 
                                        ub = bounds_decision_var_features[bounds_decision_var_features['TAG_DESCRIPTION'] == 'especifico_acido_p']['MAX_VALUE'].values[0]
                                        )



    ######################## decision variables that are TARGETS in Machiine Learning Models ########################

    ############### model d0eop_microkappa ###############
    microkappa_d1 = gppd.add_vars(m, index_bleaching, name = "microkappa_d1", 
                                        lb = bounds_decison_var_target[bounds_decison_var_target['TAG_DESCRIPTION'] == 'microkappa_d1']['MIN_VALUE'].values[0], 
                                        ub = bounds_decison_var_target[bounds_decison_var_target['TAG_DESCRIPTION'] == 'microkappa_d1']['MAX_VALUE'].values[0]
                                        )

    ############### model d0eop_blancura ###############
    blancura_d1 = gppd.add_vars(m, index_bleaching, name = "blancura_d1", 
                                        lb = bounds_decison_var_target[bounds_decison_var_target['TAG_DESCRIPTION'] == 'blancura_d1']['MIN_VALUE'].values[0], 
                                        ub = bounds_decison_var_target[bounds_decison_var_target['TAG_DESCRIPTION'] == 'blancura_d1']['MAX_VALUE'].values[0]
                                        )


    ############### model d1_brillo ###############
    brillo_entrada_p = gppd.add_vars(m, index_bleaching, name = "brillo_entrada_p", 
                                        lb = bounds_decison_var_target[bounds_decison_var_target['TAG_DESCRIPTION'] == 'brillo_entrada_p']['MIN_VALUE'].values[0], 
                                        ub = bounds_decison_var_target[bounds_decison_var_target['TAG_DESCRIPTION'] == 'brillo_entrada_p']['MAX_VALUE'].values[0]
                                        )

    ############### model p_blancura ###############
    blancura_salida_p = gppd.add_vars(m, index_bleaching, name = "blancura_salida_p", 
                                        lb = bounds_decison_var_target[bounds_decison_var_target['TAG_DESCRIPTION'] == 'blancura_salida_p']['MIN_VALUE'].values[0], 
                                        ub = bounds_decison_var_target[bounds_decison_var_target['TAG_DESCRIPTION'] == 'blancura_salida_p']['MAX_VALUE'].values[0]
                                        )


    ############ decision variables that represent the difference between actual value FEATURES in Machine Learning Models and optimal value ############


    ############### model d0eop_microkappa ###############
    diff_especifico_dioxido_d0 = gppd.add_vars(m, index_bleaching, name = "diff_especifico_dioxido_d0", 
                                        lb = -gp.GRB.INFINITY,
                                        ub = gp.GRB.INFINITY
                                        )

    diff_especifico_oxigeno_eop = gppd.add_vars(m, index_bleaching, name = "diff_especifico_oxigeno_eop", 
                                        lb = -gp.GRB.INFINITY,
                                        ub = gp.GRB.INFINITY
                                        )

    diff_especifico_peroxido_eop = gppd.add_vars(m, index_bleaching, name = "diff_especifico_peroxido_eop", 
                                        lb = -gp.GRB.INFINITY,
                                        ub = gp.GRB.INFINITY
                                        )

    diff_especifico_soda_eop = gppd.add_vars(m, index_bleaching, name = "diff_especifico_soda_eop", 
                                        lb = -gp.GRB.INFINITY,
                                        ub = gp.GRB.INFINITY
                                        )


    ############### model d0eop_blancura ###############
    # OBS: all the decision variables in the model "d0eop_blancura" are the same decision variables defined in the model "d0eop_microkappa"
    # so, it is not necesary define again



    ############### model d1_brillo ###############
    diff_especifico_dioxido_d1 = gppd.add_vars(m, index_bleaching, name = "diff_especifico_dioxido_d1", 
                                        lb = -gp.GRB.INFINITY,
                                        ub = gp.GRB.INFINITY
                                        )

    diff_especifico_acido_d1 = gppd.add_vars(m, index_bleaching, name = "diff_especifico_acido_d1", 
                                        lb = -gp.GRB.INFINITY,
                                        ub = gp.GRB.INFINITY
                                        )



    ############### model p_blancura ###############
    diff_especifico_soda_p = gppd.add_vars(m, index_bleaching, name = "diff_especifico_soda_p", 
                                        lb = -gp.GRB.INFINITY,
                                        ub = gp.GRB.INFINITY
                                        )

    diff_especifico_peroxido_p = gppd.add_vars(m, index_bleaching, name = "diff_especifico_peroxido_p", 
                                        lb = -gp.GRB.INFINITY,
                                        ub = gp.GRB.INFINITY
                                        )

    diff_especifico_acido_p = gppd.add_vars(m, index_bleaching, name = "diff_especifico_acido_p", 
                                        lb = -gp.GRB.INFINITY,
                                        ub = gp.GRB.INFINITY
                                        )



    # 6. Constraints (constraints that are not generated by a ml model)
    ######################## decision variables that are FEATURES in Machiine Learning Models ########################

    ###### model d0eop_microkappa ######
    # especifico_dioxido_d0
    m.addConstr(diff_especifico_dioxido_d0[0] >= (especifico_dioxido_d0[0] - actual_value_especifico_dioxido_d0), name = 'diff_especifico_dioxido_d0 positive segment')
    m.addConstr(diff_especifico_dioxido_d0[0] >= -(especifico_dioxido_d0[0] - actual_value_especifico_dioxido_d0), name = 'diff_especifico_dioxido_d0 negative segment')
    m.addConstr(diff_especifico_dioxido_d0[0] <= delta_especifico_dioxido_d0, name = 'diff_especifico_dioxido_d0 delta')


    # especifico_oxigeno_eop
    m.addConstr(diff_especifico_oxigeno_eop[0] >= (especifico_oxigeno_eop[0] - actual_value_especifico_oxigeno_eop), name = 'diff_especifico_oxigeno_eop positive segment')
    m.addConstr(diff_especifico_oxigeno_eop[0] >= -(especifico_oxigeno_eop[0] - actual_value_especifico_oxigeno_eop), name = 'diff_especifico_oxigeno_eop negative segment')
    m.addConstr(diff_especifico_oxigeno_eop[0] <= delta_especifico_oxigeno_eop, name = 'diff_especifico_oxigeno_eop delta')


    # especifico_peroxido_eop
    m.addConstr(diff_especifico_peroxido_eop[0] >= (especifico_peroxido_eop[0] - actual_value_especifico_peroxido_eop), name = 'diff_especifico_peroxido_eop positive segment')
    m.addConstr(diff_especifico_peroxido_eop[0] >= -(especifico_peroxido_eop[0] - actual_value_especifico_peroxido_eop), name = 'diff_especifico_peroxido_eop negative segment')
    m.addConstr(diff_especifico_peroxido_eop[0] <= delta_especifico_peroxido_eop, name = 'diff_especifico_peroxido_eop delta')


    # especifico_soda_eop
    m.addConstr(diff_especifico_soda_eop[0] >= (especifico_soda_eop[0] - actual_value_especifico_soda_eop), name = 'diff_especifico_soda_eop positive segment')
    m.addConstr(diff_especifico_soda_eop[0] >= -(especifico_soda_eop[0] - actual_value_especifico_soda_eop), name = 'diff_especifico_soda_eop negative segment')
    m.addConstr(diff_especifico_soda_eop[0] <= delta_especifico_soda_eop, name = 'diff_especifico_soda_eop delta')


    ###### model d1_brillo ######
    # especifico_dioxido_d1
    m.addConstr(diff_especifico_dioxido_d1[0] >= (especifico_dioxido_d1[0] - actual_value_especifico_dioxido_d1), name = 'diff_especifico_dioxido_d1 positive segment')
    m.addConstr(diff_especifico_dioxido_d1[0] >= -(especifico_dioxido_d1[0] - actual_value_especifico_dioxido_d1), name = 'diff_especifico_dioxido_d1 negative segment')
    m.addConstr(diff_especifico_dioxido_d1[0] <= delta_especifico_dioxido_d1, name = 'diff_especifico_dioxido_d1 delta')


    # especifico_acido_d1
    m.addConstr(diff_especifico_acido_d1[0] >= (especifico_acido_d1[0] - actual_value_especifico_acido_d1), name = 'diff_especifico_acido_d1 positive segment')
    m.addConstr(diff_especifico_acido_d1[0] >= -(especifico_acido_d1[0] - actual_value_especifico_acido_d1), name = 'diff_especifico_acido_d1 negative segment')
    m.addConstr(diff_especifico_acido_d1[0] <= delta_especifico_acido_d1, name = 'diff_especifico_acido_d1 delta')


    ###### model p_blancura ######
    # especifico_soda_p
    m.addConstr(diff_especifico_soda_p[0] >= (especifico_soda_p[0] - actual_value_especifico_soda_p), name = 'diff_especifico_soda_p positive segment')
    m.addConstr(diff_especifico_soda_p[0] >= -(especifico_soda_p[0] - actual_value_especifico_soda_p), name = 'diff_especifico_soda_p negative segment')
    m.addConstr(diff_especifico_soda_p[0] <= delta_especifico_soda_p, name = 'diff_especifico_soda_p delta')


    # especifico_peroxido_p
    m.addConstr(diff_especifico_peroxido_p[0] >= (especifico_peroxido_p[0] - actual_value_especifico_peroxido_p), name = 'diff_especifico_peroxido_p positive segment')
    m.addConstr(diff_especifico_peroxido_p[0] >= -(especifico_peroxido_p[0] - actual_value_especifico_peroxido_p), name = 'diff_especifico_peroxido_p negative segment')
    m.addConstr(diff_especifico_peroxido_p[0] <= delta_especifico_peroxido_p, name = 'diff_especifico_peroxido_p delta')


    # especifico_acido_p
    m.addConstr(diff_especifico_acido_p[0] >= (especifico_acido_p[0] - actual_value_especifico_acido_p), name = 'diff_especifico_acido_p positive segment')
    m.addConstr(diff_especifico_acido_p[0] >= -(especifico_acido_p[0] - actual_value_especifico_acido_p), name = 'diff_especifico_acido_p negative segment')
    m.addConstr(diff_especifico_acido_p[0] <= delta_especifico_acido_p, name = 'diff_especifico_acido_p delta')

    # update model
    m.update()


    # 7. Add constraints that are machine learning models

    ######################## instance model d0eop_microkappa ########################

    # create instance with controlables variables. sorted according the list of features. ES MUY IMPORTANTE QUE ESTÉ ORDENADO LAS VARIABLES DE DECUISIÓN DE ACUERDO A LA LISTA DE FEATURES
    instance_controlables_d0eop_microkappa = pd.DataFrame([especifico_dioxido_d0, especifico_oxigeno_eop, especifico_peroxido_eop, especifico_soda_eop]).T
    instance_controlables_d0eop_microkappa.columns = list_features_controlables_d0eop_microkappa # rename columns
    instance_controlables_d0eop_microkappa.reset_index(inplace = True)
    instance_controlables_d0eop_microkappa.drop(columns = 'index', inplace = True)

    # append features controlables with no controlables
    instance_d0eop_microkappa = pd.concat([instance_no_controlables_d0eop_microkappa, instance_controlables_d0eop_microkappa], axis = 1)
    instance_d0eop_microkappa = instance_d0eop_microkappa[list_features_d0eop_microkappa] # sort features

    # set index - optimization set
    instance_d0eop_microkappa.index = index_bleaching

    ###### load ml constraint ######
    pred_constr_d0eop_microkappa = add_predictor_constr(gp_model = m, 
                                    predictor = model_d0eop_microkappa, 
                                    input_vars = instance_d0eop_microkappa, 
                                    output_vars = microkappa_d1,
                                    name = f'model_predict_d0eop_microkappa'
                                    )


    ######################## instance model d0eop_blancura ########################

    # create instance with controlables variables. sorted according the list of features. ES MUY IMPORTANTE QUE ESTÉ ORDENADO LAS VARIABLES DE DECUISIÓN DE ACUERDO A LA LISTA DE FEATURES
    instance_controlables_d0eop_blancura = pd.DataFrame([especifico_dioxido_d0, especifico_oxigeno_eop, especifico_peroxido_eop, especifico_soda_eop]).T
    instance_controlables_d0eop_blancura.columns = list_features_controlables_d0eop_blancura # rename columns
    instance_controlables_d0eop_blancura.reset_index(inplace = True)
    instance_controlables_d0eop_blancura.drop(columns = 'index', inplace = True)

    # append features controlables with no controlables
    instance_d0eop_blancura = pd.concat([instance_no_controlables_d0eop_blancura, instance_controlables_d0eop_blancura], axis = 1)
    instance_d0eop_blancura = instance_d0eop_blancura[list_features_d0eop_blancura] # sort features

    # set index - optimization set
    instance_d0eop_blancura.index = index_bleaching

    ###### load ml constraint ######
    # pred_constr_d0eop_blancura = add_predictor_constr(gp_model = m, 
    #                                 predictor = model_d0eop_blancura, 
    #                                 input_vars = instance_d0eop_blancura, 
    #                                 output_vars = blancura_d1, # change vs microkappa
    #                                 name = f'model_predict_d0eop_blancura'
    #                                 )
    # TODO - SOLUCIONAR ESTE PROBLEMA QUE INFACTIBLE SOLUCUIÓN


    ######################## instance model d1_brillo ########################

    # create instance with controlables variables. sorted according the list of features. ES MUY IMPORTANTE QUE ESTÉ ORDENADO LAS VARIABLES DE DECUISIÓN DE ACUERDO A LA LISTA DE FEATURES
    instance_controlables_d1_brillo = pd.DataFrame([especifico_dioxido_d1, especifico_acido_d1]).T # <---- change ---------<--------<--------
    instance_controlables_d1_brillo.columns = list_features_controlables_d1_brillo # rename columns
    instance_controlables_d1_brillo.reset_index(inplace = True)
    instance_controlables_d1_brillo.drop(columns = 'index', inplace = True)


    # create instance with target of previos model. Model: "d0eop_blancura"
    instance_previos_target_d0eop_blancura = pd.DataFrame([blancura_d1]).T # <---- change ---------<--------<--------
    instance_previos_target_d0eop_blancura.columns  = list_target_d0eop_blancura # rename columns
    instance_previos_target_d0eop_blancura.reset_index(inplace = True)
    instance_previos_target_d0eop_blancura.drop(columns = 'index', inplace = True)


    # create instance with target of previos model. Model: "d0eop_microkappa"
    instance_previos_target_d0eop_microkappa = pd.DataFrame([microkappa_d1]).T # <---- change ---------<--------<--------
    instance_previos_target_d0eop_microkappa.columns  = list_target_d0eop_microkappa # rename columns
    instance_previos_target_d0eop_microkappa.reset_index(inplace = True)
    instance_previos_target_d0eop_microkappa.drop(columns = 'index', inplace = True)


    # append features controlables with no controlables
    instance_d1_brillo = pd.concat([instance_no_controlables_d1_brillo, instance_controlables_d1_brillo, 
                                    instance_previos_target_d0eop_blancura, instance_previos_target_d0eop_microkappa
                                ], axis = 1)
    instance_d1_brillo = instance_d1_brillo[list_features_d1_brillo] # sort features

    # set index - optimization set
    instance_d1_brillo.index = index_bleaching

    ###### load ml constraint ######
    pred_constr_d1_brillo = add_predictor_constr(gp_model = m, 
                                    predictor = model_d1_brillo, 
                                    input_vars = instance_d1_brillo, 
                                    output_vars = brillo_entrada_p,
                                    name = f'model_predict_d1_brillo'
                                    )


    ######################## instance model p_blancura ########################

    # create instance with controlables variables. sorted according the list of features. ES MUY IMPORTANTE QUE ESTÉ ORDENADO LAS VARIABLES DE DECUISIÓN DE ACUERDO A LA LISTA DE FEATURES
    instance_controlables_p_blancura = pd.DataFrame([especifico_soda_p, especifico_peroxido_p, especifico_acido_p]).T # <---- change ---------<--------<--------
    instance_controlables_p_blancura.columns = list_features_controlables_p_blancura # rename columns
    instance_controlables_p_blancura.reset_index(inplace = True)
    instance_controlables_p_blancura.drop(columns = 'index', inplace = True)

    # create instance with target of previos model
    instance_previos_target_p_blancura = pd.DataFrame([brillo_entrada_p]).T # <---- change ---------<--------<--------
    instance_previos_target_p_blancura.columns  = list_target_d1_brillo # rename columns
    instance_previos_target_p_blancura.reset_index(inplace = True)
    instance_previos_target_p_blancura.drop(columns = 'index', inplace = True)

    # append features controlables with no controlables
    instance_p_blancura = pd.concat([instance_no_controlables_p_blancura, instance_controlables_p_blancura, instance_previos_target_p_blancura], axis = 1)
    instance_p_blancura = instance_p_blancura[list_features_p_blancura] # sort features

    # set index - optimization set
    instance_p_blancura.index = index_bleaching

    ###### load ml constraint ######
    pred_constr_p_blancura = add_predictor_constr(gp_model = m, 
                                    predictor = model_p_blancura, 
                                    input_vars = instance_p_blancura, 
                                    output_vars = blancura_salida_p,
                                    name = f'model_predict_p_blancura'
                                    )




    # 8. Define Objetive Function
    # ######################## define variable of costs of each stage ########################
    costs_d0 = especifico_dioxido_d0*prices['dioxido'].values[0]
    costs_eop = especifico_soda_eop*prices['soda'].values[0] + especifico_peroxido_eop*prices['peroxido'].values[0] + especifico_oxigeno_eop*prices['oxigeno'].values[0]
    costs_d1 = especifico_acido_d1*prices['acido'].values[0] + especifico_dioxido_d1*prices['dioxido'].values[0]
    costs_p = especifico_acido_p*prices['acido'].values[0] + especifico_soda_p*prices['soda'].values[0] + especifico_peroxido_p*prices['peroxido'].values[0]


    ######################## set objetive minimize costs ########################

    # it is necesary define with .sum() to get a guroli linear expression
    m.setObjective(costs_d0.sum()+ costs_eop.sum() + costs_d1.sum() + costs_p.sum(),
                gp.GRB.MAXIMIZE)


    """ 9. Solve optimization problem """
    m.optimize()
    status_solver = m.Status


    """ 10. Print results if solver achieve a solution"""
    if status_solver == 2:

        ######## create a dataframe with set as index
        solution = pd.DataFrame(index = index_bleaching)

        ######################## save optimal values - features of models (only the features) ########################

        # model d0eop_microkappa
        solution["especifico_dioxido_d0"] = especifico_dioxido_d0.gppd.X
        solution["especifico_oxigeno_eop"] = especifico_oxigeno_eop.gppd.X
        solution["especifico_peroxido_eop"] = especifico_peroxido_eop.gppd.X
        solution["especifico_soda_eop"] = especifico_soda_eop.gppd.X

        # model d1_brillo
        solution["especifico_dioxido_d1"] = especifico_dioxido_d1.gppd.X
        solution["especifico_acido_d1"] = especifico_acido_d1.gppd.X

        # model p_blancura
        solution["especifico_soda_p"] = especifico_soda_p.gppd.X
        solution["especifico_peroxido_p"] = especifico_peroxido_p.gppd.X
        solution["especifico_acido_p"] = especifico_acido_p.gppd.X


        ######################## save optimal values - targets of models (some targets are features of the model of the next step) ########################
        solution["microkappa_d1"] = microkappa_d1.gppd.X  # model d0eop_microkappa
        solution["brillo_entrada_p"] = brillo_entrada_p.gppd.X  # model d1_brillo
        solution["blancura_salida_p"] = blancura_salida_p.gppd.X  # model p_blancura


        ######################## round values ########################
        solution = solution.round(3)


        ######################## transpose ########################
        solution = solution.T

        ######################## # get value objetive function ########################
        opt_cost = m.ObjVal



        ######## create a dataframe with set as index
        actual_values = pd.DataFrame(index = index_bleaching)

        ######################## save optimal values - features of models (only the features) ########################

        # model d0eop_microkappa
        actual_values["especifico_dioxido_d0"] = actual_value_especifico_dioxido_d0
        actual_values["especifico_oxigeno_eop"] = actual_value_especifico_oxigeno_eop
        actual_values["especifico_peroxido_eop"] = actual_value_especifico_peroxido_eop
        actual_values["especifico_soda_eop"] = actual_value_especifico_soda_eop

        # model d1_brillo
        actual_values["especifico_dioxido_d1"] = actual_value_especifico_dioxido_d1
        actual_values["especifico_acido_d1"] = actual_value_especifico_acido_d1

        # model p_blancura
        actual_values["especifico_soda_p"] = actual_value_especifico_soda_p
        actual_values["especifico_peroxido_p"] = actual_value_especifico_peroxido_p
        actual_values["especifico_acido_p"] = actual_value_especifico_acido_p

        ######################## transpose ########################
        actual_values = actual_values.T


        ######## create a dataframe with set as index
        diff_delta_decision_var = pd.DataFrame(index = index_bleaching)

        ######################## save optimal values - features of models (only the features) ########################

        # model d0eop_microkappa
        diff_delta_decision_var["especifico_dioxido_d0"] = diff_especifico_dioxido_d0.gppd.X
        diff_delta_decision_var["especifico_oxigeno_eop"] = diff_especifico_oxigeno_eop.gppd.X
        diff_delta_decision_var["especifico_peroxido_eop"] = diff_especifico_peroxido_eop.gppd.X
        diff_delta_decision_var["especifico_soda_eop"] = diff_especifico_soda_eop.gppd.X

        # model d1_brillo
        diff_delta_decision_var["especifico_dioxido_d1"] = diff_especifico_dioxido_d1.gppd.X
        diff_delta_decision_var["especifico_acido_d1"] = diff_especifico_acido_d1.gppd.X

        # model p_blancura
        diff_delta_decision_var["especifico_soda_p"] = diff_especifico_soda_p.gppd.X
        diff_delta_decision_var["especifico_peroxido_p"] = diff_especifico_peroxido_p.gppd.X
        diff_delta_decision_var["especifico_acido_p"] = diff_especifico_acido_p.gppd.X


        ######################## round values ########################
        diff_delta_decision_var = diff_delta_decision_var.round(3)

        ######################## transpose ########################
        diff_delta_decision_var = diff_delta_decision_var.T


    else:
        opt_cost = 0
        solution = 0
        actual_values = 0
        diff_delta_decision_var = 0
        
    return status_solver, opt_cost, solution, actual_values, diff_delta_decision_var





